{"version":3,"sources":["../../src/schema/type-conflict-reporter.js"],"names":["_","require","report","typeOf","util","findRootNodeAncestor","isNodeWithDescription","node","internal","description","findNodeDescription","obj","formatValue","isArray","value","inspect","colors","depth","breakLength","Infinity","wasElipsisLast","usedTypes","output","forEach","type","item","indexOf","push","join","TypeConflictEntry","selector","types","addExample","parent","printEntry","sortedByTypeName","sortBy","entries","typeName","log","map","TypeConflictReporter","clearConflicts","getFromSelector","dataEntry","addConflict","examples","substring","entry","filter","example","printConflicts","values","length","warn","typeConflictReporter","module","exports"],"mappings":"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","file":"type-conflict-reporter.js","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst typeOf = require(`type-of`)\nconst util = require(`util`)\nconst { findRootNodeAncestor } = require(`./node-tracking`)\n\nconst isNodeWithDescription = node =>\n  node && node.internal && node.internal.description\n\nconst findNodeDescription = obj => {\n  if (obj) {\n    const node = findRootNodeAncestor(obj, isNodeWithDescription)\n    if (isNodeWithDescription(node)) {\n      return node.internal.description\n    }\n  }\n  return ``\n}\n\nconst formatValue = value => {\n  if (!_.isArray(value)) {\n    return util.inspect(value, {\n      colors: true,\n      depth: 0,\n      breakLength: Infinity,\n    })\n  }\n\n  let wasElipsisLast = false\n  const usedTypes = []\n  const output = []\n\n  value.forEach(item => {\n    const type = typeOf(item)\n    if (usedTypes.indexOf(type) !== -1) {\n      if (!wasElipsisLast) {\n        output.push(`...`)\n        wasElipsisLast = true\n      }\n    } else {\n      output.push(formatValue(item))\n      wasElipsisLast = false\n      usedTypes.push(type)\n    }\n  })\n\n  return `[ ${output.join(`, `)} ]`\n}\n\nclass TypeConflictEntry {\n  constructor(selector) {\n    this.selector = selector\n    this.types = {}\n  }\n\n  addExample({ value, type, parent }) {\n    this.types[type] = {\n      value,\n      description: findNodeDescription(parent),\n    }\n  }\n\n  printEntry() {\n    const sortedByTypeName = _.sortBy(\n      _.entries(this.types),\n      ([typeName, value]) => typeName\n    )\n\n    report.log(\n      `${this.selector}:${sortedByTypeName\n        .map(\n          ([typeName, { value, description }]) =>\n            `\\n - type: ${typeName}\\n   value: ${formatValue(\n              value\n            )}${description && `\\n   source: ${description}`}`\n        )\n        .join(``)}`\n    )\n  }\n}\n\nclass TypeConflictReporter {\n  constructor() {\n    this.clearConflicts()\n  }\n\n  clearConflicts() {\n    this.entries = {}\n  }\n\n  getFromSelector(selector) {\n    if (this.entries[selector]) {\n      return this.entries[selector]\n    }\n\n    const dataEntry = new TypeConflictEntry(selector)\n    this.entries[selector] = dataEntry\n    return dataEntry\n  }\n\n  addConflict(selector, examples) {\n    if (selector.substring(0, 11) === `SitePlugin.`) {\n      // Don't store and print out type conflicts in plugins.\n      // This is out of user control so he can't do anything\n      // to hide those.\n      return\n    }\n\n    const entry = this.getFromSelector(selector)\n    examples\n      .filter(example => example.value != null)\n      .forEach(example => entry.addExample(example))\n  }\n\n  printConflicts() {\n    const entries = _.values(this.entries)\n    if (entries.length > 0) {\n      report.warn(\n        `There are conflicting field types in your data. GraphQL schema will omit those fields.`\n      )\n      entries.forEach(entry => entry.printEntry())\n    }\n  }\n}\n\nconst typeConflictReporter = new TypeConflictReporter()\n\nconst printConflicts = () => {\n  typeConflictReporter.printConflicts()\n}\n\nmodule.exports = { typeConflictReporter, printConflicts, TypeConflictEntry }\n"]}